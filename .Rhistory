wdata <- wdata[,-c(1,3:6,9:22, 29:37)]
#Clean the EVENTTYPE column for similar terms
levels(wdata$EVTYPE)[grepl("BLIZZARD", levels(wdata$EVTYPE))] <- "BLIZZARDS"
levels(wdata$EVTYPE)[grepl("FLOOD", levels(wdata$EVTYPE))] <- "ANY FLOOD"
levels(wdata$EVTYPE)[grepl("THUNDERSTORM", levels(wdata$EVTYPE))] <- "THUNDERSTORMS"
levels(wdata$EVTYPE)[grepl("HEAVY RAIN", levels(wdata$EVTYPE))] <- "HEAVY RAINS/LIGHTNING"
levels(wdata$EVTYPE)[grepl("LIGHTNING", levels(wdata$EVTYPE))] <- "HEAVY RAINS/LIGHTNING"
levels(wdata$EVTYPE)[grepl("TORNADO", levels(wdata$EVTYPE))] <- "TORNADOS"
levels(wdata$EVTYPE)[grepl("WIND", levels(wdata$EVTYPE))] <- "WINDS"
levels(wdata$EVTYPE)[grepl("TROPICAL STORM", levels(wdata$EVTYPE))] <- "TROPICAL STORMS"
levels(wdata$EVTYPE)[grepl("HURRICANE", levels(wdata$EVTYPE))] <- "HURRICANES"
levels(wdata$EVTYPE)[grepl("SPOUT", levels(wdata$EVTYPE))] <- "WATER SPOUTS"
levels(wdata$EVTYPE)[grepl("WINTER STORM", levels(wdata$EVTYPE))] <- "WINTER STORMS"
levels(wdata$EVTYPE)[grepl("URBAN", levels(wdata$EVTYPE))] <- "ANY FLOOD"
levels(wdata$EVTYPE)[grepl("COLD", levels(wdata$EVTYPE))] <- "COLD WEATHER"
levels(wdata$EVTYPE)[grepl("HEAT", levels(wdata$EVTYPE))] <- "HEAT"
levels(wdata$EVTYPE)[grepl("SLIDE", levels(wdata$EVTYPE))] <- "MUD SLIDES"
levels(wdata$EVTYPE)[grepl("ICE", levels(wdata$EVTYPE))] <- "ICE"
levels(wdata$EVTYPE)[grepl("HEAVY SNOW", levels(wdata$EVTYPE))] <- "HEAVY SNOW"
levels(wdata$EVTYPE)[grepl("HAIL", levels(wdata$EVTYPE))] <- "HAIL"
levels(wdata$EVTYPE)[grepl("FUNNEL", levels(wdata$EVTYPE))] <- "FUNNEL CLOUD"
levels(wdata$EVTYPE)[grepl("FREEZING RAIN", levels(wdata$EVTYPE))] <- "FREEZING RAIN"
levels(wdata$EVTYPE)[grepl("MICROBURST", levels(wdata$EVTYPE))] <- "MICROBURST"
levels(wdata$EVTYPE)[grepl("FIRE", levels(wdata$EVTYPE))] <- "WILD FIRES"
levels(wdata$EVTYPE)[grepl("RECORD HIGH", levels(wdata$EVTYPE))] <- "RECORD HIGH TEMPERATURE"
library(dplyr)
wdata$FATALITIES <- as.numeric(wdata$FATALITIES)
wdata$INJURIES <- as.numeric(wdata$INJURIES)
healthDamage <- wdata[,3:5] %>%
group_by(EVTYPE) %>% summarise(
fatalities = mean(FATALITIES, na.rm = TRUE),
injuries = mean(INJURIES, na.rm = TRUE)
)
healthDamage<-healthDamage[order(-healthDamage$injuries,-healthDamage$fatalities),]
topTenHealth <- healthDamage[1:10,]
topTenHealth
wdata$PROPDMG <- as.numeric(wdata$PROPDMG)
#recode the units columns
wdata$PROPDMGEXP <- tolower(as.character(wdata$PROPDMGEXP))
wdata$PROPDMGEXP[grepl("b", wdata$PROPDMGEXP)] <- "1000000000"
wdata$PROPDMGEXP[grepl("k", wdata$PROPDMGEXP)] <- "1000"
wdata$PROPDMGEXP[grepl("m", wdata$PROPDMGEXP)] <- "1000000"
wdata$PROPDMGEXP[grepl("h", wdata$PROPDMGEXP)] <- "100"
wdata$propertydamage <- rep(0, nrow(wdata))
wdata$PROPDMGEXP <- as.numeric(wdata$PROPDMGEXP)
for (i in nrow(wdata)) {
if (!is.na(wdata$PROPDMGEXP) & wdata$PROPDMGEXP > 99) {
wdata$propertydamage <- wdata$PROPDMG * wdata$PROPDMGEXP
}
else {
wdata$propertydamage <- wdata$PROPDMG
}
}
propertyDamageSummary <- wdata[,c("EVTYPE", "propertydamage")] %>%
group_by(EVTYPE) %>% summarise(
meanPropertyDamage = mean(propertydamage, na.rm = TRUE)
)
propertyDamageSummary<-propertyDamageSummary[order(-propertyDamageSummary$meanPropertyDamage),]
topTenProperty <- propertyDamageSummary[1:10,]
topTenProperty
library(rCharts)
propertyDamagePlot <- hPlot(meanPropertyDamage ~ EVTYPE, data = topTenProperty, type = "column", title = "Average Property Damage by Event Type (Top Ten)")
#settings for displaying the plot
library(knitr)
opts_chunk$set(comment = NA, results = 'asis', comment = NA, tidy = F)
#display the plot
library(rCharts)
propertyDamagePlot$show('inline', include_assets = TRUE, cdn = TRUE)
#read in the data set specifying the column class types, to save time on loading
classes <- c(NULL, "character", NULL, NULL, NULL, NULL, "factor", "factor", rep(NULL, 14), rep("factor", 3), "factor", "factor", "factor", rep(NULL, 9))
#get a sample of data (for memory purposes)
wdata <- read.csv("repdata_data_StormData.csv.bz2", colClasses = classes, header=TRUE, nrow = 300000)
#get rid of unnecessary columns
wdata <- wdata[,-c(1,3:6,9:22, 29:37)]
#read in the data set specifying the column class types, to save time on loading
classes <- c(NULL, "character", NULL, NULL, NULL, NULL, "factor", "factor", rep(NULL, 14), rep("factor", 3), "factor", "factor", "factor", rep(NULL, 9))
#get a sample of data (for memory purposes)
wdata <- read.csv("repdata_data_StormData.csv.bz2", colClasses = classes, header=TRUE, nrow = 400000)
#get rid of unnecessary columns
wdata <- wdata[,-c(1,3:6,9:22, 29:37)]
#Clean the EVENTTYPE column for similar terms
levels(wdata$EVTYPE) <- toupper(levels(wdata$EVTYPE))
levels(wdata$EVTYPE)[grepl("BLIZZARD", levels(wdata$EVTYPE))] <- "BLIZZARDS"
levels(wdata$EVTYPE)[grepl("FLOOD", levels(wdata$EVTYPE))] <- "ANY FLOOD"
levels(wdata$EVTYPE)[grepl("THUNDERSTORM", levels(wdata$EVTYPE))] <- "THUNDERSTORMS"
levels(wdata$EVTYPE)[grepl("HEAVY RAIN", levels(wdata$EVTYPE))] <- "HEAVY RAINS/LIGHTNING"
levels(wdata$EVTYPE)[grepl("LIGHTNING", levels(wdata$EVTYPE))] <- "HEAVY RAINS/LIGHTNING"
levels(wdata$EVTYPE)[grepl("TORNADO", levels(wdata$EVTYPE))] <- "TORNADOS"
levels(wdata$EVTYPE)[grepl("WIND", levels(wdata$EVTYPE))] <- "WINDS"
levels(wdata$EVTYPE)[grepl("TROPICAL STORM", levels(wdata$EVTYPE))] <- "TROPICAL STORMS"
levels(wdata$EVTYPE)[grepl("HURRICANE", levels(wdata$EVTYPE))] <- "HURRICANES"
levels(wdata$EVTYPE)[grepl("SPOUT", levels(wdata$EVTYPE))] <- "WATER SPOUTS"
levels(wdata$EVTYPE)[grepl("WINTER STORM", levels(wdata$EVTYPE))] <- "WINTER STORMS"
levels(wdata$EVTYPE)[grepl("URBAN", levels(wdata$EVTYPE))] <- "ANY FLOOD"
levels(wdata$EVTYPE)[grepl("COLD", levels(wdata$EVTYPE))] <- "COLD WEATHER"
levels(wdata$EVTYPE)[grepl("HEAT", levels(wdata$EVTYPE))] <- "HEAT"
levels(wdata$EVTYPE)[grepl("SLIDE", levels(wdata$EVTYPE))] <- "MUD SLIDES"
levels(wdata$EVTYPE)[grepl("ICE", levels(wdata$EVTYPE))] <- "ICE"
levels(wdata$EVTYPE)[grepl("HEAVY SNOW", levels(wdata$EVTYPE))] <- "HEAVY SNOW"
levels(wdata$EVTYPE)[grepl("HAIL", levels(wdata$EVTYPE))] <- "HAIL"
levels(wdata$EVTYPE)[grepl("FUNNEL", levels(wdata$EVTYPE))] <- "FUNNEL CLOUD"
levels(wdata$EVTYPE)[grepl("FREEZING RAIN", levels(wdata$EVTYPE))] <- "FREEZING RAIN"
levels(wdata$EVTYPE)[grepl("MICROBURST", levels(wdata$EVTYPE))] <- "MICROBURST"
levels(wdata$EVTYPE)[grepl("FIRE", levels(wdata$EVTYPE))] <- "WILD FIRES"
levels(wdata$EVTYPE)[grepl("RECORD HIGH", levels(wdata$EVTYPE))] <- "RECORD HIGH TEMPERATURE"
library(dplyr)
wdata$FATALITIES <- as.numeric(wdata$FATALITIES)
wdata$INJURIES <- as.numeric(wdata$INJURIES)
healthDamage <- wdata[,3:5] %>%
group_by(EVTYPE) %>% summarise(
fatalities = mean(FATALITIES, na.rm = TRUE),
injuries = mean(INJURIES, na.rm = TRUE)
)
healthDamage<-healthDamage[order(-healthDamage$injuries,-healthDamage$fatalities),]
topTenHealth <- healthDamage[1:10,]
topTenHealth
wdata$PROPDMG <- as.numeric(wdata$PROPDMG)
#recode the units columns
wdata$PROPDMGEXP <- tolower(as.character(wdata$PROPDMGEXP))
wdata$PROPDMGEXP[grepl("b", wdata$PROPDMGEXP)] <- "1000000000"
wdata$PROPDMGEXP[grepl("k", wdata$PROPDMGEXP)] <- "1000"
wdata$PROPDMGEXP[grepl("m", wdata$PROPDMGEXP)] <- "1000000"
wdata$PROPDMGEXP[grepl("h", wdata$PROPDMGEXP)] <- "100"
wdata$propertydamage <- rep(0, nrow(wdata))
wdata$PROPDMGEXP <- as.numeric(wdata$PROPDMGEXP)
for (i in nrow(wdata)) {
if (!is.na(wdata$PROPDMGEXP) & wdata$PROPDMGEXP > 99) {
wdata$propertydamage <- wdata$PROPDMG * wdata$PROPDMGEXP
}
else {
wdata$propertydamage <- wdata$PROPDMG
}
}
propertyDamageSummary <- wdata[,c("EVTYPE", "propertydamage")] %>%
group_by(EVTYPE) %>% summarise(
meanPropertyDamage = mean(propertydamage, na.rm = TRUE)
)
propertyDamageSummary<-propertyDamageSummary[order(-propertyDamageSummary$meanPropertyDamage),]
topTenProperty <- propertyDamageSummary[1:10,]
topTenProperty
levels(wdata$EVTYPE)[grepl("RAIN", levels(wdata$EVTYPE))]
#Clean the EVENTTYPE column for similar terms
levels(wdata$EVTYPE) <- toupper(levels(wdata$EVTYPE))
levels(wdata$EVTYPE)[grepl("BLIZZARD", levels(wdata$EVTYPE))] <- "BLIZZARDS"
levels(wdata$EVTYPE)[grepl("FLOOD", levels(wdata$EVTYPE))] <- "ANY FLOOD"
levels(wdata$EVTYPE)[grepl("THUNDERSTORM", levels(wdata$EVTYPE))] <- "THUNDERSTORMS"
levels(wdata$EVTYPE)[grepl("HEAVY RAIN", levels(wdata$EVTYPE))] <- "HEAVY RAINS/LIGHTNING"
levels(wdata$EVTYPE)[grepl("LIGHTNING", levels(wdata$EVTYPE))] <- "HEAVY RAINS/LIGHTNING"
levels(wdata$EVTYPE)[grepl("TORNADO", levels(wdata$EVTYPE))] <- "TORNADOS"
levels(wdata$EVTYPE)[grepl("WIND", levels(wdata$EVTYPE))] <- "WINDS"
levels(wdata$EVTYPE)[grepl("TROPICAL STORM", levels(wdata$EVTYPE))] <- "TROPICAL STORMS"
levels(wdata$EVTYPE)[grepl("HURRICANE", levels(wdata$EVTYPE))] <- "HURRICANES"
levels(wdata$EVTYPE)[grepl("SPOUT", levels(wdata$EVTYPE))] <- "WATER SPOUTS"
levels(wdata$EVTYPE)[grepl("WINTER STORM", levels(wdata$EVTYPE))] <- "WINTER STORMS"
levels(wdata$EVTYPE)[grepl("URBAN", levels(wdata$EVTYPE))] <- "ANY FLOOD"
levels(wdata$EVTYPE)[grepl("COLD", levels(wdata$EVTYPE))] <- "COLD WEATHER"
levels(wdata$EVTYPE)[grepl("HEAT", levels(wdata$EVTYPE))] <- "HEAT"
levels(wdata$EVTYPE)[grepl("SLIDE", levels(wdata$EVTYPE))] <- "MUD SLIDES"
levels(wdata$EVTYPE)[grepl("ICE", levels(wdata$EVTYPE))] <- "ICE"
levels(wdata$EVTYPE)[grepl("HEAVY SNOW", levels(wdata$EVTYPE))] <- "HEAVY SNOW"
levels(wdata$EVTYPE)[grepl("HAIL", levels(wdata$EVTYPE))] <- "HAIL"
levels(wdata$EVTYPE)[grepl("FUNNEL", levels(wdata$EVTYPE))] <- "FUNNEL CLOUD"
levels(wdata$EVTYPE)[grepl("FREEZING RAIN", levels(wdata$EVTYPE))] <- "FREEZING RAIN"
levels(wdata$EVTYPE)[grepl("MICROBURST", levels(wdata$EVTYPE))] <- "MICROBURST"
levels(wdata$EVTYPE)[grepl("FIRE", levels(wdata$EVTYPE))] <- "WILD FIRES"
levels(wdata$EVTYPE)[grepl("RECORD HIGH", levels(wdata$EVTYPE))] <- "RECORD HIGH TEMPERATURE"
levels(wdata$EVTYPE)[grepl("RAIN", levels(wdata$EVTYPE))] <- "ANY RAIN"
library(dplyr)
wdata$FATALITIES <- as.numeric(wdata$FATALITIES)
wdata$INJURIES <- as.numeric(wdata$INJURIES)
healthDamage <- wdata[,3:5] %>%
group_by(EVTYPE) %>% summarise(
fatalities = mean(FATALITIES, na.rm = TRUE),
injuries = mean(INJURIES, na.rm = TRUE)
)
healthDamage<-healthDamage[order(-healthDamage$injuries,-healthDamage$fatalities),]
topTenHealth <- healthDamage[1:10,]
topTenHealth
wdata$PROPDMG <- as.numeric(wdata$PROPDMG)
#recode the units columns
wdata$PROPDMGEXP <- tolower(as.character(wdata$PROPDMGEXP))
wdata$PROPDMGEXP[grepl("b", wdata$PROPDMGEXP)] <- "1000000000"
wdata$PROPDMGEXP[grepl("k", wdata$PROPDMGEXP)] <- "1000"
wdata$PROPDMGEXP[grepl("m", wdata$PROPDMGEXP)] <- "1000000"
wdata$PROPDMGEXP[grepl("h", wdata$PROPDMGEXP)] <- "100"
wdata$propertydamage <- rep(0, nrow(wdata))
wdata$PROPDMGEXP <- as.numeric(wdata$PROPDMGEXP)
for (i in nrow(wdata)) {
if (!is.na(wdata$PROPDMGEXP) & wdata$PROPDMGEXP > 99) {
wdata$propertydamage <- wdata$PROPDMG * wdata$PROPDMGEXP
}
else {
wdata$propertydamage <- wdata$PROPDMG
}
}
propertyDamageSummary <- wdata[,c("EVTYPE", "propertydamage")] %>%
group_by(EVTYPE) %>% summarise(
meanPropertyDamage = mean(propertydamage, na.rm = TRUE)
)
propertyDamageSummary<-propertyDamageSummary[order(-propertyDamageSummary$meanPropertyDamage),]
topTenProperty <- propertyDamageSummary[1:10,]
topTenProperty
carfit1 <- lm(mpg ~ cyl + wt, mtcars)
summary(carfit1)
-1.5078 * 4
-1.5078 * 8
-12.0624 - (-6.0312)
-6.0312-3.1910
-12.0624-3.1910
-15.2534--9.2222
carfit <- lm(mpg ~ cyl, mtcars)
summary(carfit)
carfit1 <- lm(mpg ~ factor(cyl) + wt, mtcars)
carfit <- lm(mpg ~ factor(cyl), mtcars)
summary(carfit1)
carfit <- lm(mpg ~ factor(cyl), mtcars)
summary(carfit)
carfit3 <- lm(mpg ~ factor(cyl) + wt + factor(cyl)*wt, mtcars)
summary(carfit3)
anova(carfit1, carfit3)
carfit4<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(carfit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
mathlm <- lm(y ~ x)
plot(mathlm)
plot(mathlm$fit)
plot (x~y)
round(dfbetas(mathlm))
round(dfbetas(mathlm)[1:5,2],3)
round(hatvalues(mathlm)[1:5],3)
shiny::runApp('delayPredictor')
library(shinyapps)
library(plyr)
?ddply
shiny::runApp('delayPredictor')
write.csv(daily_flights, "daily_flights.csv", row.names=FALSE)
View(weatherToday)
write.csv(weatherToday, "weatherToday.csv", row.names=FALSE)
shiny::runApp('delayPredictor')
deployApp("delayPredictor")
isGeneric('predict')
isGeneric('lm')
isGeneric('colSums')
isGeneric('dgamma')
isGeneric('digamma')
getOption("defaultPackages")
str(f)
methods(f)
methods(lm)
methods(predict)
methods(dgamma)
methods(colSums)
library(MASS)
data(shuttle)
landing <- glm(use ~ wind + magn, family="binomial", data=shuttle)
summary(landing)
exp(-3.201e-02)
landing0 <- glm(use ~ wind, family="binomial", data=shuttle)
summary(landing0)
exp(-0.03181)
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
head(InsectSprays)
sprayfit <-  glm(count~spray, data = InsectSprays, family=poisson)
summary(sprayfit)
exp(0.05588)
exp( 2.67415)
sprayfit <-  glm(count ~ spray - 1, data = InsectSprays, family = "poisson")
summary(sprayfit)
exp(sprayfit$coeff)
14.500000/15.333333
swirl()
swirl
library(swirl)
swirl()
var(rpois(1000, 50))
nxt()
view(hits)
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits']
)
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(visits ~ date + offset(simplystats/(visits+1)), poisson, hits)
mdl2 <- glm(visits ~ date + offset(log(visits + 1)), poisson, hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
summary(mdl2)
mdl$coef
mdl2$coef
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
test <- data.frame('id'= rep(1:5,2), 'string'= LETTERS[1:10])
test <- test[order(test$id), ]
test
?seq
dates <- seq("2014-01-01", "2014-04-01", length.out = 10)
dates <- seq(as.Date("2014-01-01"), as.Date("2014-04-01"), length.out = 10)
test$reg <- dates
test
test[!duplicated(test$id),]
test[order(test$reg),]
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
View(hair_eye_male)
?melt
??melt
names(airquality) <- tolower(names(airquality))
melt(airquality, id=c("month", "day"))
library(reshape2)
names(airquality) <- tolower(names(airquality))
melt(airquality, id=c("month", "day"))
View(airquality)
names(airquality) <- tolower(names(airquality))
newtest <- melt(airquality, id=c("month", "day"))
View(newtest)
View(test)
subset(test$string, id==1) <- rep(0,nrow(subset(test$string, id==1)))
subset(test$string, test$id==1) <- rep(0,nrow(subset(test$string, test$id==1)))
subset(test$string, test$id==1)
rep(0,nrow(subset(test$string, test$id==1)))
rep(0,nrow(subset(test, test$id==1)))
subset(test$string, test$id==1) <- rep(0,nrow(subset(test, test$id==1)))
newtest1 <- data.frame(id = 9, string = Z, reg = "2014-03-04")
newtest1 <- data.frame(id = 9, string = "Z", reg = "2014-03-04")
class(rbind(test, newtest1))
t <- test[,1:2]
dcast(t)
?dcast
t$string[1:2] <- NA
t
length(NA)
t$string[1:2] <- NULL
seq_along(t$string)
t$value <- is.na(t$string)
t
t$value <- !is.na(t$string)
t
dcast(t)
dcast(t, value.var = value)
dcast(t, formula = double(value), value.var = value)
dcast(t, formula = double, value.var = value)
dcast(t, string ~ id, formula = double)
dcast(t, string ~ id, formula = sum)
dcast(t, string ~ id)
colSums(t)
.colSums(as.matrix(t))
newt <- dcast(t, string ~ id)
View(newt)
t2 <- data.frame(string = c("C", "K", "I", "J", "B"))
t2$upi <- c(12,23,12,14,18)
merge(t2, newt)
View(`t2`)
merge(t2, newt, all.x = TRUE)
?join
?merge
combo <- merge(t2, newt, all.x = TRUE)
melt(combo, id = upi)
melt(combo, id = "upi")
melt(combo[,2:7], id = "upi")
dcast(melt(combo[,2:7], id = "upi"))
dcast(melt(combo[,2:7], id = "upi"), sum)
dcast(melt(combo[,2:7], id = "upi"), upi ~ variable)
dcast(melt(combo[,2:7], id = "upi"), upi ~ variable, sum)
t4 <- dcast(melt(combo[,2:7], id = "upi"), upi ~ variable, sum)
merge(combo, t4)
merge(combo, t4, all.x = TRUE)
merge(combo[,1:2], t4)
install.packages(c("shiny", "tm" ,"wordcloud", "ggplot2"), repos = "http://cran.wustl.edu/")
x <- c("m", "f", "u", "f")
lookup <- c(m = "Male", f="Female", u = NA)
lookup[x]
lookup
unname(lookup[x])
result <- unname(lookup[x])
result
#Subsetting and Assigning
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F,F,T)
)
id <- match(grades, info$grade)
grades <- c(1,2,2,3,1)
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F,F,T)
)
id <- match(grades, info$grade)
match(grades, info$grade)
?match
info[id,]
rownames(info) <- info$grade
#we named the rows accordingly and then refer to them like in a named vector
info[as.character(grades),]
rep(1:3, each =2)
infoResult <- info[id,]
infoResult[sample(nrow(df), 3),]
infoResult[sample(nrow(infoResult), 3),]
infoResult[sample(nrow(infoResult), 3, rep = T),]
infoResult[sample(nrow(infoResult), nrow(infoResult), rep = T),]
df <- data.frame(x = c(2,4,1), y = c(9,11,6), n = c(3,5,1))
df <- data.frame(x = c(2,4,1), y = c(9,11,6), n = c(3,5,1))
#so we just need to repeat the rows the number of times in n
df[rep(1:nrow(df), df$n),]
setdiff(names(df), "n")
df[setdiff(names(df), "n")]
???%%
??%%
?%%
1:10 %% 2
sample(10) < 4
which(sample(10) < 4)
sample(10)
x1 <- 1:10 %% 2 == 0
x1
which(x1)
is.function(sum)
?is.function
is.primitive(sum)
is.primitive(unlist)
objs <- mget(ls("package:base"), inherits = TRUE)
funs <- Filter(is.function, objs)
head(funs)
funs[1]
funs[1][2]
funs[1][1]
?split
x <- 2
g <- function () { y <- 1}
g <- function () {
y <- 1
c(x, y) }
f()
g
g()
rm(x, g)
?rm
f <- function () {
f <- function() {
f <= function() {
x ^ 2}
f(x) + 1}
f(x) * 2}
f(10)
f <- function (x) {
f <- function(x) {
f <= function(x) {
x ^ 2}
f(x) + 1}
f(x) * 2}
f(10)
f <- function (x) {
f <- function(x) {
f <- function(x) {
x ^ 2}
f(x) + 1}
f(x) * 2}
f(10)
6^2+2
x <- 6^2+2
x^2
#Assign the value 6+2 to x
x <- 6+2
z <- c(2,4,6,8,10)
z[3]
z != 10
z > 5
table(BikeData$employed)
table(mtcars$am)
class(mtcars[,2])
install.packages("SDSFoundations")
BikeData <- read.csv("~/BikeData.csv")
View(BikeData)
#show number of students
table(BikeData$student)
#Pull out student data into a new data frame
student <-BikeData[BikeData$student==1,]
View(student)
table(student$cyc_freq)
#Create vector for the variable distance
distance <-student$distance
distance
#Find average distance ridden
mean(distance)
library("rmarkdown", lib.loc="~/R/win-library/3.1")
install.packages("markdown")
library("markdown", lib.loc="~/R/win-library/3.1")
library("RCurl", lib.loc="~/R/win-library/3.1")
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
publish(index.html, host = "rpubs")
getwd()
setwd("C:/Users/connie/Documents/ruser/RuserMeetup")
publish(index.html, host = "rpubs")
publish("index.html", host = "rpubs")
publish_rpubs(title = "rCharts and Interactive Dashboards", html_file = "index.html")
library("knitr", lib.loc="~/R/win-library/3.1")
library("yaml", lib.loc="~/R/win-library/3.1")
publish_rpubs(title = "rCharts and Interactive Dashboards", html_file = "index.html")
publish_rpubs(title = "rCharts and Interactive Dashboards", html_file = "index.html")
